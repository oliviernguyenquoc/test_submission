people = merge(x = contacts, y = individues, by = c('individu_id'), all=TRUE)
View(people)
View(contacts)
View(pays)
View(individues)
View(people)
people = merge(x = individues, y = contacts, by = c('individu_id'), all=TRUE)
View(people)
coordentite <- dbGetQuery(con, "SELECT * from coordentite")
coordadresse <- dbGetQuery(con, "SELECT * from coordadresse")
View(coordentite)
View(coordadresse)
View(coordadresse)
View(pays)
View(pays)
peopleComplete = merge(x = people,
y = merge(x = coordentite,
y = merge(x = coordadresse,
y = pays, by = c('pays_id')
), by = c('coordentite_id')
), by = c('individu_id')
)
View(peopleComplete)
nbPeopleByCountry = data.frame(country=unique(peopleComplete$pays_nom))
View(nbPeopleByCountry)
nbPeopleByCountry[nbPeopleByCountry$country = 'FRANCE']
nbPeopleByCountry[nbPeopleByCountry$country == 'FRANCE']
nbPeopleByCountry[nbPeopleByCountry$country == 'FRANCE',]
length(nbPeopleByCountry[nbPeopleByCountry$country == 'FRANCE',])
length(nbPeopleByCountry[nbPeopleByCountry$country = 'FRANCE',])
length(nbPeopleByCountry[nbPeopleByCountry$country = 'FRANCE'])
length(nbPeopleByCountry[nbPeopleByCountry$country == 'FRANCE'])
View(nbPeopleByCountry)
length(peopleComplete[peopleComplete$country == 'FRANCE'])
length(peopleComplete[peopleComplete$pays_nom == 'FRANCE'])
length(peopleComplete[peopleComplete$pays_nom == 'FRANCE'])
View(peopleComplete)
peopleComplete[peopleComplete$pays_nom == 'FRANCE']
peopleComplete[peopleComplete$pays_nom == 'FRANCE',]
length(peopleComplete[peopleComplete$pays_nom == 'FRANCE',])
View(peopleComplete)
length(peopleComplete[peopleComplete$pays_nom == 'FRANCE'])
length(peopleComplete[peopleComplete$pays_nom == 'FRANCE',])
length(peopleComplete[,peopleComplete$pays_nom == 'FRANCE'])
length(peopleComplete[peopleComplete$pays_nom == 'FRANCE'])
length(peopleComplete[peopleComplete$pays_nom = 'FRANCE'])
,
length(peopleComplete[peopleComplete$pays_nom == 'FRANCE',])
View(peopleComplete)
length(peopleComplete[peopleComplete$pays_nom == 'ESPAGNE',])
nrow(peopleComplete[peopleComplete$pays_nom == 'ESPAGNE',])
nrow(peopleComplete[peopleComplete$pays_nom == 'FRANCE',])
nbPeopleByCountry$nb = mapply(nbPeopleByCountry$country, FUN = function(x){
count = nrow(peopleComplete[peopleComplete$pays_nom == x,])
return(count)
})
View(nbPeopleByCountry)
View(nbPeopleByCountry)
require(rworldmap)
install.packages('rworldmap')
library(rworldmap)
?joinCountryData2Map
View(nbPeopleByCountry)
View(peopleComplete)
peopleComplete = merge(x = people,
y = merge(x = coordentite,
y = merge(x = coordadresse,
y = pays, by = c('pays_id')
), by = c('coordentite_id')
), by = c('individu_id')
)
nbPeopleByCountry = data.frame(country=unique(peopleComplete$pays_nom), country_code=unique(peopleComplete$pays_code))
nbPeopleByCountry$nb = mapply(nbPeopleByCountry$country, FUN = function(x){
count = nrow(peopleComplete[peopleComplete$pays_nom == x,])
return(count)
})
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry, joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
?mapCountryData
?mapBubbles
mapBubbles(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
?mapBubbles
mapBubbles(n,nameZSize="POP2005",nameZColour="REGION",colourPalette="rainbow",oceanCol="lightblue",landCol="wheat", nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",nameZColour="REGION",colourPalette="rainbow",oceanCol="lightblue",landCol="wheat", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="wheat", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
nrow(peopleComplete[is.null(peopleComplete$pays_nom)])
nrow(peopleComplete[])
length(peopleComplete[is.null(peopleComplete$pays_nom)])
count(peopleComplete[is.null(peopleComplete$pays_nom)])
sum(peopleComplete[is.null(peopleComplete$pays_nom)])
sum(peopleComplete[is.na(peopleComplete$pays_nom)])
sum(is.na(peopleComplete$pays_nom))
peopleComplete$pays_nom
View(peopleComplete)
View(peopleComplete)
View(peopleComplete)
View(contacts)
people = merge(x = individues, y = contacts, by = c('individu_id'))
peopleComplete = merge(x = people,
y = merge(x = coordentite,
y = merge(x = coordadresse,
y = pays, by = c('pays_id')
), by = c('coordentite_id')
), by = c('individu_id')
)
nbPeopleByCountry = data.frame(country=unique(peopleComplete$pays_nom), country_code=unique(peopleComplete$pays_code))
nbPeopleByCountry$nb = mapply(nbPeopleByCountry$country, FUN = function(x){
count = nrow(peopleComplete[peopleComplete$pays_nom == x,])
return(count)
})
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry, joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
sum(is.na(peopleComplete$pays_nom))
nrow(peopleComplete[])
View(peopleComplete)
View(people)
?merge
people = merge(x = individues, y = contacts, by = c('individu_id'), all.x=TRUE)
people = merge(x = individues, y = contacts, by = c('individu_id'), all.x=TRUE, all.y=FALSE)
people = merge(x = individues, y = contacts, by = c('individu_id'), all.x=TRUE)
View(people)
View(individues)
peopleComplete = merge(x = people,
y = merge(x = coordentite,
y = merge(x = coordadresse,
y = pays, by = c('pays_id')
)
, by = c('coordentite_id')
)
, by = c('individu_id')
)
nbPeopleByCountry = data.frame(country=unique(peopleComplete$pays_nom), country_code=unique(peopleComplete$pays_code))
nbPeopleByCountry$nb = mapply(nbPeopleByCountry$country, FUN = function(x){
count = nrow(peopleComplete[peopleComplete$pays_nom == x,])
return(count)
})
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry, joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
sum(is.na(peopleComplete$pays_nom))
nrow(peopleComplete[])
View(individues)
peopleComplete = merge(x = individues,
y = merge(x = coordentite,
y = merge(x = coordadresse,
y = pays, by = c('pays_id')
)
, by = c('coordentite_id')
)
, by = c('individu_id')
)
nbPeopleByCountry = data.frame(country=unique(peopleComplete$pays_nom), country_code=unique(peopleComplete$pays_code))
nbPeopleByCountry$nb = mapply(nbPeopleByCountry$country, FUN = function(x){
count = nrow(peopleComplete[peopleComplete$pays_nom == x,])
return(count)
})
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry, joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
sum(is.na(peopleComplete$pays_nom))
nrow(peopleComplete[])
peopleComplete = merge(x = individues,
y = merge(x = coordentite,
y = merge(x = coordadresse,
y = pays, by = c('pays_id')
)
, by = c('coordentite_id')
)
, by = c('individu_id')
)
nbPeopleByCountry = data.frame(country=unique(peopleComplete$pays_nom), country_code=unique(peopleComplete$pays_code))
nbPeopleByCountry$nb = mapply(nbPeopleByCountry$country, FUN = function(x){
count = nrow(peopleComplete[peopleComplete$pays_nom == x,])
return(count)
})
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry, joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
sum(is.na(peopleComplete$pays_nom))
nrow(peopleComplete[])
lastCoordonee = merge(x = coordentite,
y = merge(x = coordadresse,
y = pays, by = c('pays_id')
)
, by = c('coordentite_id')
)
View(lastCoordonee)
View(lastCoordonee)
View(coordadresse)
View(coordentite)
typeof(coordentite$updated_at)
coordadresse$created_at = as.Date(coordadresse$created_at)
coordadresse$updated_at = as.Date(coordadresse$updated_at)
coordentite$created_at = as.Date(coordadresse$created_at)
coordentite$updated_at = as.Date(coordadresse$updated_at)
coordadresse$created_at = as.Date(coordadresse$created_at)
coordadresse$updated_at = as.Date(coordadresse$updated_at)
coordentite$created_at = as.Date(coordentite$created_at)
coordentite$updated_at = as.Date(coordentite$updated_at)
?as.Date
?aggregate
View(coordadresse)
lastCoordadresse = aggregate(coordadresse$updated_at,by=list(coordadresse$coordentite_id),max)
View(lastCoordadresse)
lastCoordadresse = aggregate(.~updated_at, data = coordadresse,FUN = max)
df$id = coordadresse$coordentite_id
df$updated_at = coordadresse$coordentite_id
df = aggregate(df$updated_at, by=list(df$id), max)
df2 = merge(df,d,by.x=1,by.y=1)
df$id = coordadresse$coordentite_id
df$updated_at = coordadresse$updated_at
coordadresse$coordentite_id
df = data.frame(id = coordadresse$coordentite_id, updated_at = coordadresse$updated_at)
df = aggregate(df$updated_at, by=list(df$id), max)
df2 = merge(df,d,by.x=1,by.y=1)
df = data.frame(id = coordadresse$coordentite_id, updated_at = coordadresse$updated_at)
d = aggregate(df$updated_at, by=list(df$id), max)
df2 = merge(df,d,by.x=1,by.y=1)
View(df2)
df2[df2[,3]!=df2[,4],4]=NA
View(df2)
df2[df2[,2]!=df2[,3],3]=NA
df2[df2[,2]!=df2[,3],3]=0
df2[df2[,2]!=df2[,3],4]=NA
df2$new[df2[,2]!=df2[,3]]=NA
View(df2)
df2$new[df2[,2]!=df2[,3]]=0
View(df2)
View(lastCoordonee)
View(coordentite)
View(coordadresse)
View(coordentite)
View(lastCoordonee)
View(coordentite)
coordentite[!is.na(coordentite$individu_id)
}
coordentite[!is.na(coordentite$individu_id)]
coordentite[!is.na(coordentite$individu_id),]
coordonee = merge(x = coordentite[!is.na(coordentite$individu_id),],
y = merge(x = coordadresse,
y = pays, by = c('pays_id')
)
, by = c('coordentite_id')
)
View(coordonee)
View(coordonee)
View(coordentite)
View(coordonee)
View(coordentite)
View(coordadresse)
View(coordadresse)
coordentite$coordentite_id[!is.na(coordentite$individu_id),]
coordentite$coordentite_id[!is.na(coordentite$individu_id)]
coordentite[!is.na(coordentite$individu_id),coordentite_id]
coordentite$coordentite_id[!is.na(coordentite$individu_id)]
nbrow(coordentite$coordentite_id[!is.na(coordentite$individu_id)])
nrow(coordentite$coordentite_id[!is.na(coordentite$individu_id)])
coordentite$coordentite_id[!is.na(coordentite$individu_id)]
length(coordentite$coordentite_id[!is.na(coordentite$individu_id)])
coordadresse[coordadresse$coordentite_id %in% coordentite$coordentite_id[!is.na(coordentite$individu_id)],]
nrow(coordadresse[coordadresse$coordentite_id %in% coordentite$coordentite_id[!is.na(coordentite$individu_id)],])
coordadresseRestreint = coordadresse[coordadresse$coordentite_id %in% coordentite$coordentite_id[!is.na(coordentite$individu_id)],]
View(coordadresseRestreint)
coordadresseRestreint[!is.na(coordadresseRestreint$coordadresse_l62),]
nrow(coordadresseRestreint[!is.na(coordadresseRestreint$coordadresse_l62),])
df = data.frame(id = coordadresseRestreint$coordentite_id, updated_at = coordadresseRestreint$updated_at)
d = aggregate(df$updated_at, by=list(df$id), max)
View(d)
unique(df$id)
length(unique(df$id))
length(unique(coordadresseRestreint$coordentite_id))
length(unique(coordadresse$coordentite_id))
nbPeopleByCountry[nbPeopleByCountry$country!='FRANCE',]
nbPeopleByCountry = nbPeopleByCountry[nbPeopleByCountry$country!='FRANCE',]
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry, joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
sum(is.na(peopleComplete$pays_nom))
nrow(peopleComplete[])
people <- dbGetQuery(con, "SELECT * from vuecentralecarrieres_V9")
warnings()
View(people)
View(people)
View(people)
View(people)
nbPeopleByCountry = nbPeopleByCountry[nbPeopleByCountry$country_code!='FR',]
nbPeopleByCountry = data.frame(country_code=unique(people$perso_pays))
nbPeopleByCountry$nb = mapply(nbPeopleByCountry$country_code, FUN = function(x){
count = nrow(people[people$country_code == x,])
return(count)
})
nbPeopleByCountry = nbPeopleByCountry[nbPeopleByCountry$country_code!='FR',]
View(nbPeopleByCountry)
nbPeopleByCountry = data.frame(country_code=unique(people$perso_pays))
nbPeopleByCountry$nb = mapply(nbPeopleByCountry$country_code, FUN = function(x){
count = nrow(people[people$perso_pays == x,])
return(count)
})
nbPeopleByCountry = nbPeopleByCountry[nbPeopleByCountry$country_code!='FR',]
View(nbPeopleByCountry)
people[people$perso_pays == 'FR',]
nrow(people[people$perso_pays == 'FR',])
nrow(people[people$perso_pays != 'FR',])
nbPeopleByCountry = data.frame(country_code=unique(people$perso_pays))
nbPeopleByCountry$nb = mapply(nbPeopleByCountry$country_code, FUN = function(x){
count = nrow(people[people$perso_pays == x,])
return(count)
})
View(nbPeopleByCountry)
country_code=unique(people$perso_pays)
View(nbPeopleByCountry)
nrow(people[people$perso_pays = 'DZ',])
nrow(people[people$perso_pays == 'DZ',])
nrow(people[people$perso_pays == 'CL',])
people[people$perso_pays == 'CL',]
try = people[people$perso_pays == 'CL',]
View(try)
View(people)
View(try)
View(people)
View(people)
View(try)
try = people[is.na(people$individu_id),]
try = people[people$perso_pays == 'CL',]
View(try)
try = people[people$perso_pays = 'CL',]
try = people[people$perso_pays == 'CL',]
try = people[is.na(people$perso_pays),]
View(try)
try = people[people$perso_pays == 'CL' & !is.na(people$perso_pays),]
nbPeopleByCountry = data.frame(country_code=unique(people$perso_pays))
nbPeopleByCountry$nb = mapply(nbPeopleByCountry$country_code, FUN = function(x){
count = nrow(people[people$perso_pays == x & !is.na(people$perso_pays),])
return(count)
})
nbPeopleByCountry = nbPeopleByCountry[nbPeopleByCountry$country_code!='FR',]
View(nbPeopleByCountry)
#map
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry, joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
sum(is.na(peopleComplete$pays_nom))
nrow(peopleComplete[])
#map
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry, joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
sum(is.na(peopleComplete$pays_nom))
nrow(peopleComplete[])
#map
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry, joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
sum(is.na(peopleComplete$pays_nom))
nrow(peopleComplete[])
View(people)
View(pays)
View(nbPeopleByCountry)
View(people)
people[$perso_pays == 'IT']
people[people$perso_pays == 'IT']
people[people$perso_pays == 'IT',]
people[people$perso_pays == 'IT'  & !is.na(people$perso_pays),]
try = people[people$perso_pays == 'IT'  & !is.na(people$perso_pays),]
View(try)
try = people[people$pro_pays == 'IT'  & people$perso_pays == 'IT'  & !is.na(people$perso_pays),]
View(try)
try = people[people$pro_pays == 'IT'  & people$perso_pays == 'IT'  & !is.na(people$perso_pays),]
View(try)
try = people[people$pro_pays == 'IT'  & people$perso_pays == 'IT'  & !is.na(people$perso_pays) & !is.na(people$pro_pays),]
View(try)
try = people[people$pro_pays == 'IT'  || people$perso_pays == 'IT'  & !is.na(people$perso_pays) & !is.na(people$pro_pays),]
try = people[(people$pro_pays == 'IT'  || people$perso_pays == 'IT')  & !is.na(people$perso_pays) & !is.na(people$pro_pays),]
View(try)
try = people[(people$pro_pays == 'IT'  | people$perso_pays == 'IT')  & !is.na(people$perso_pays) & !is.na(people$pro_pays),]
View(try)
try = people[(people$pro_pays == 'IT'  | people$perso_pays == 'IT')  & !is.na(people$perso_pays) | !is.na(people$pro_pays),]
try = people[(people$pro_pays == 'IT'  | people$perso_pays == 'IT')  & !is.na(people$perso_pays),]
try = people[(people$pro_pays == 'IT'  & !is.na(people$perso_pays),]
try = people[people$pro_pays == 'IT'  & !is.na(people$perso_pays),]
View(try)
try = people[people$pro_pays == 'IT',]
try = people[people$perso_pays == 'IT',]
View(people)
View(peopleComplete)
try = people[people$statut == 'IT',]
try = people[people$statut == 'actif',]
View(try)
try = people[people$statut == 'actif' & (people$perso_pays != 'FR' | people$pro_pays != 'FR'),]
View(try)
try = try[!is.na(people$individu_id)]
try = try[!is.na(people$individu_id),]
try = people[people$statut == 'actif' & (people$perso_pays != 'FR' | people$pro_pays != 'FR'),]
try = try[!is.na(try$individu_id),]
View(try)
try1 = people[people$statut == 'actif' & (people$perso_pays != 'FR' | people$pro_pays != 'FR'),]
try1 = try1[!is.na(try1$individu_id),]
View(try1)
write(try1, "map.csv")
write.table(try1, "map.csv")
write.table(try1, "/Users/NguyenQuoc/Desktop/CNA/map.csv")
write.table(try1, "/Users/NguyenQuoc/Desktop/CNA/map.csv", sep=";")
View(try1)
nbPeopleByCountry[nbPeopleByCountry$nb<3,]
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry[nbPeopleByCountry$nb<3,], joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
library(rworldmap)
n <- joinCountryData2Map(nbPeopleByCountry[nbPeopleByCountry$nb<2,], joinCode="ISO2", nameJoinColumn="country_code")
mapCountryData(n, nameColumnToPlot="nb", mapTitle="Nombre de Nantralien dans le monde")
mapBubbles(n,nameZSize="nb",oceanCol="lightblue",landCol="white", mapTitle="Nombre de Nantralien dans le monde")
install.packages(c('repr', 'pbdZMQ', 'devtools'))
devtools::install_github('IRkernel/IRdisplay')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
?corrplot
library(corrplot)
corrplot(corelations, method="circle")
?corrplot
library(xlsx)
library(data.table)
rm(list=ls())
graphics.off()
train=read.table('us_census_full/census_income_learn.csv', header=F, sep=',')
test=read.table('us_census_full/census_income_test.csv', header=F, sep=',')
setwd("~/Documents/Mes documents/Kaggle/Dataiku")
train=read.table('us_census_full/census_income_learn.csv', header=F, sep=',')
test=read.table('us_census_full/census_income_test.csv', header=F, sep=',')
View(test)
names(train) <- c('age','class_of_worker','industry_code','occupation_code','education','wage_per_hour','enrolled_in_edu_inst_last_wk','marital_status','major_industry_code','major_occupation_code','race','hispanic_Origin','sex','member_of_a_labor_union','reason_for_unemployment','full_or_part_time_employment_stat','capital_gains','capital_losses','dividends_from_stocks','tax_filer_status','region_of_previous_residence','state_of_previous_residence','detailed_household_and_family_stat','detailed_household_summary_in_household','instance_weight','migration_code_change_in_msa','migration_code_change_in_reg','migration_code_move_within_reg','live_in_this_house_1_year_ago','migration_prev_res_in_sunbelt','num_persons_worked_for_employer','family_members_under_18','country_of_birth_father','country_of_birth_mother','country_of_birth_self','citizenship','own_business_or_self_employed','taxable_income_amount','veterans_benefits','weeks_worked_in_year','year','income')
View(train)
train['target'] = (train['income']==' - 50000.')
View(train)
train['income'] = NULL
View(train)
summary(train)
hist(train$target)
hist(train$wage_per_hour)
library(reshape2)
library(ggplot2)
ggplot(train, aes(x=wage_per_hour)) + geom_bar(stat="identity") + facet_grid(target~.)
ggplot(train, aes(x=wage_per_hour)) + geom_histogram(data=train['target'==TRUE]) + geom_histogram(data=train['target'==FALSE])
ggplot(train, aes(x=wage_per_hour))
ggplot(train, aes(x=wage_per_hour, fill = "red"))
ggplot(train, aes(x=wage_per_hour, fill = "red"))  + geom_histogram(alpha = 0.2)
ggplot(train[train$wage_per_hour!0], aes(x=wage_per_hour, fill = "red"))  + geom_histogram(alpha = 0.2)
ggplot(train[train$wage_per_hour=!0], aes(x=wage_per_hour, fill = "red"))  + geom_histogram(alpha = 0.2)
ggplot(train[train$wage_per_hour!=0], aes(x=wage_per_hour, fill = "red"))  + geom_histogram(alpha = 0.2)
ggplot(train, aes(x=wage_per_hour, fill = "red"))  + geom_histogram(alpha = 0.2)
ggplot(train[,train$wage_per_hour!=0], aes(x=wage_per_hour, fill = "red"))  + geom_histogram(alpha = 0.2)
ggplot(train[train$wage_per_hour!=0,], aes(x=wage_per_hour, fill = "red"))  + geom_histogram(alpha = 0.2)
ggplot(train[train$wage_per_hour!=0,], aes(x=wage_per_hour))  + geom_histogram(data=subset(dat,target == TRUE), fill = "red" , alpha = 0.5)
ggplot(train[train$wage_per_hour!=0,], aes(x=wage_per_hour))  + geom_histogram(data=subset(train,target == TRUE), fill = "red" , alpha = 0.5)
ggplot(train[train$wage_per_hour!=0,], aes(x=wage_per_hour))  + geom_histogram(data=subset(train[train$wage_per_hour!=0,],target == TRUE), fill = "red" , alpha = 0.5)
ggplot(train[train$wage_per_hour!=0,], aes(x=wage_per_hour))
+ geom_histogram(data=subset(train[train$wage_per_hour!=0,],target == TRUE), fill = "red" , alpha = 0.5)
+ geom_histogram(data=subset(train[train$wage_per_hour!=0,],target == FALSE), fill = "red" , alpha = 0.5)
ggplot(train[train$wage_per_hour!=0,], aes(x=wage_per_hour)) + geom_histogram(data=subset(train[train$wage_per_hour!=0,],target == TRUE), fill = "red" , alpha = 0.5) + geom_histogram(data=subset(train[train$wage_per_hour!=0,],target == FALSE), fill = "blue" , alpha = 0.5)
train_data = read.table('features.csv', header=T, sep=',')
train_data = read.table('features.csv', header=T, sep=',')
corelations = cor(train_data, method = "pearson")
corelations = cor(train, method = "pearson")
library(corrplot)
corrplot(corelations, method="circle")
corelations = cor(train, method = "pearson")
View(train)
cor(train$wage_per_hour, train$target)
cor(train$age, train$target)
cor(train$wage_per_hour*train$weeks_worked_in_year, train$target)
View(train)
corelations = cor(train_data, method = "pearson")
library(corrplot)
corrplot(corelations, method="circle")
View(train_data)
train_data = read.table('features.csv', header=T, sep=',')
corelations = cor(train_data, method = "pearson")
library(corrplot)
corrplot(corelations, method="circle")
nums <- sapply(train, is.numeric)
corelations = cor(train[ , nums], method = "pearson")
library(corrplot)
corrplot(corelations, method="circle")
nums <- sapply(train, is.numeric)
corelations = cor(nums, method = "pearson")
library(corrplot)
corrplot(corelations, method="circle")
nums
train['target']*1
train['target']
train*1
nums <- sapply(train*1, is.numeric)
train_num = train*1
View(train_num)
nums <- sapply(train, is.numeric)
nums
nums <- sapply(train_num, is.numeric)
nums
corelations = cor(train[ , nums], method = "pearson")
library(corrplot)
corrplot(corelations, method="circle")
